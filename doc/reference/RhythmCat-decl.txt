<MACRO>
<NAME>RC_PLUGIN_MAGIC_NUMBER</NAME>
#define RC_PLUGIN_MAGIC_NUMBER 0x100B0916
</MACRO>
<MACRO>
<NAME>RC_PLUGIN_OLD_MAGIC_NUMBER</NAME>
#define RC_PLUGIN_OLD_MAGIC_NUMBER 0x100B090B
</MACRO>
<ENUM>
<NAME>RCPluginType</NAME>
typedef enum RCPluginType {
    PLUGIN_TYPE_MODULE = 1
}RCPluginType;
</ENUM>
<STRUCT>
<NAME>RCPluginConfData</NAME>
typedef struct RCPluginConfData {
    gchar *path;
    gchar *name;
    gchar *desc;
    gchar *author;
    gchar *version;
    gchar *website;
    RCPluginType type;
}RCPluginConfData;
</STRUCT>
<STRUCT>
<NAME>RCPluginModuleData</NAME>
typedef struct RCPluginModuleData {
    guint32 magic_number;
    gchar *group_name;
    gchar *path;
    gboolean resident;
    GQuark id;
    gboolean busy_flag;
}RCPluginModuleData;
</STRUCT>
<FUNCTION>
<NAME>rc_plugin_init</NAME>
<RETURNS>void </RETURNS>
 
</FUNCTION>
<FUNCTION>
<NAME>rc_plugin_exit</NAME>
<RETURNS>void </RETURNS>
 
</FUNCTION>
<FUNCTION>
<NAME>rc_plugin_search_dir</NAME>
<RETURNS>gboolean </RETURNS>
const gchar *dirname 
</FUNCTION>
<FUNCTION>
<NAME>rc_plugin_get_list</NAME>
<RETURNS>const GSList *</RETURNS>
 
</FUNCTION>
<FUNCTION>
<NAME>rc_plugin_list_free</NAME>
<RETURNS>void </RETURNS>
 
</FUNCTION>
<FUNCTION>
<NAME>rc_plugin_conf_free</NAME>
<RETURNS>void </RETURNS>
RCPluginConfData *plugin_data 
</FUNCTION>
<FUNCTION>
<NAME>rc_plugin_conf_load</NAME>
<RETURNS>RCPluginConfData *</RETURNS>
const gchar *filename 
</FUNCTION>
<FUNCTION>
<NAME>rc_plugin_load</NAME>
<RETURNS>gboolean </RETURNS>
RCPluginType type, const gchar *filename 
</FUNCTION>
<FUNCTION>
<NAME>rc_plugin_configure</NAME>
<RETURNS>gboolean </RETURNS>
RCPluginType type, const gchar *filename 
</FUNCTION>
<FUNCTION>
<NAME>rc_plugin_close</NAME>
<RETURNS>void </RETURNS>
RCPluginType type, const gchar *filename 
</FUNCTION>
<FUNCTION>
<NAME>rc_plugin_check_running</NAME>
<RETURNS>gboolean </RETURNS>
RCPluginType type, const gchar *path 
</FUNCTION>
<FUNCTION>
<NAME>rc_plugin_check_exist</NAME>
<RETURNS>GSList *</RETURNS>
RCPluginType type, const gchar *name 
</FUNCTION>
<FUNCTION>
<NAME>rc_plugin_get_path</NAME>
<RETURNS>const gchar *</RETURNS>
RCPluginType type, const gchar *group_name 
</FUNCTION>
<STRUCT>
<NAME>RCMusicMetaData</NAME>
typedef struct RCMusicMetaData {
    gint64 length;
    gchar *uri;
    guint tracknum;
    guint bitrate;
    gint samplerate;
    gint channels;
    gchar *title;
    gchar *artist;
    gchar *album;
    gchar *comment;
    gchar *file_type;
    gchar *emb_cue;
    GstBuffer *image;
    gboolean eos;
    gboolean audio_flag;
    gboolean video_flag;
    gpointer user_data;
}RCMusicMetaData;
</STRUCT>
<FUNCTION>
<NAME>rc_tag_read_metadata</NAME>
<RETURNS>RCMusicMetaData *</RETURNS>
const gchar *uri 
</FUNCTION>
<FUNCTION>
<NAME>rc_tag_free</NAME>
<RETURNS>void </RETURNS>
RCMusicMetaData *mmd 
</FUNCTION>
<FUNCTION>
<NAME>rc_tag_set_playing_metadata</NAME>
<RETURNS>void </RETURNS>
const RCMusicMetaData *mmd 
</FUNCTION>
<FUNCTION>
<NAME>rc_tag_get_playing_metadata</NAME>
<RETURNS>const RCMusicMetaData *</RETURNS>
 
</FUNCTION>
<FUNCTION>
<NAME>rc_tag_get_name_from_fpath</NAME>
<RETURNS>gchar *</RETURNS>
const gchar *filename 
</FUNCTION>
<FUNCTION>
<NAME>rc_tag_find_file</NAME>
<RETURNS>gchar *</RETURNS>
const gchar *dirname, const gchar *str, const gchar *extname 
</FUNCTION>
<FUNCTION>
<NAME>rc_tag_search_lyric_file</NAME>
<RETURNS>gchar *</RETURNS>
const gchar *dirname, const RCMusicMetaData *mmd 
</FUNCTION>
<FUNCTION>
<NAME>rc_tag_search_album_file</NAME>
<RETURNS>gchar *</RETURNS>
const gchar *dirname, const RCMusicMetaData *mmd 
</FUNCTION>
<STRUCT>
<NAME>RCMusicMetaData</NAME>
struct RCMusicMetaData;
</STRUCT>
<ENUM>
<NAME>RCCueInputType</NAME>
typedef enum RCCueInputType
{
    RC_CUE_INPUT_URI = 0,
    RC_CUE_INPUT_PATH = 1,
    RC_CUE_INPUT_EMBEDED = 2
}RCCueInputType;
</ENUM>
<STRUCT>
<NAME>RCCueTrack</NAME>
typedef struct RCCueTrack {
    guint index;
    gchar *title;
    gchar *performer;
    guint64 time0;
    guint64 time1;
}RCCueTrack;
</STRUCT>
<FUNCTION>
<NAME>rc_cue_read_data</NAME>
<RETURNS>guint </RETURNS>
const gchar *input, RCCueInputType type, RCCueData *data 
</FUNCTION>
<FUNCTION>
<NAME>rc_cue_free</NAME>
<RETURNS>void </RETURNS>
RCCueData *data 
</FUNCTION>
<FUNCTION>
<NAME>rc_cue_get_track_num</NAME>
<RETURNS>gboolean </RETURNS>
const gchar *path, gchar **cue_path, gint *track_num 
</FUNCTION>
<FUNCTION>
<NAME>rc_cue_get_metadata</NAME>
<RETURNS>struct RCMusicMetaData *</RETURNS>
RCCueData *cue_data, gint track_num, struct RCMusicMetaData *cue_mmd 
</FUNCTION>
<STRUCT>
<NAME>RCLyricData</NAME>
typedef struct RCLyricData {
    gint64 time;
    gint64 length;
    guint index;
    gchar *text;
}RCLyricData;
</STRUCT>
<FUNCTION>
<NAME>rc_lrc_init</NAME>
<RETURNS>void </RETURNS>
 
</FUNCTION>
<FUNCTION>
<NAME>rc_lrc_exit</NAME>
<RETURNS>void </RETURNS>
 
</FUNCTION>
<FUNCTION>
<NAME>rc_lrc_read_from_file</NAME>
<RETURNS>gboolean </RETURNS>
const gchar *filename 
</FUNCTION>
<FUNCTION>
<NAME>rc_lrc_clean_data</NAME>
<RETURNS>void </RETURNS>
 
</FUNCTION>
<FUNCTION>
<NAME>rc_lrc_get_lrc_data</NAME>
<RETURNS>const RCLyricData **</RETURNS>
 
</FUNCTION>
<FUNCTION>
<NAME>rc_lrc_get_lrc_length</NAME>
<RETURNS>gsize </RETURNS>
 
</FUNCTION>
<FUNCTION>
<NAME>rc_lrc_get_text_data</NAME>
<RETURNS>const gchar *</RETURNS>
 
</FUNCTION>
<FUNCTION>
<NAME>rc_lrc_get_line_by_time</NAME>
<RETURNS>const RCLyricData *</RETURNS>
gint64 time 
</FUNCTION>
<FUNCTION>
<NAME>rc_lrc_get_line_now</NAME>
<RETURNS>const RCLyricData *</RETURNS>
 
</FUNCTION>
<FUNCTION>
<NAME>rc_gui_plugin_window_create</NAME>
<RETURNS>void </RETURNS>
 
</FUNCTION>
<STRUCT>
<NAME>RCMusicMetaData</NAME>
struct RCMusicMetaData;
</STRUCT>
<USER_FUNCTION>
<NAME>RCMsgAsyncQueueWatchFunc</NAME>
<RETURNS>void </RETURNS>
gpointer item, gpointer data
</USER_FUNCTION>
<ENUM>
<NAME>RCMsgType</NAME>
typedef enum RCMsgType {
    MSG_TYPE_EMPTY = 0,
    MSG_TYPE_TEST = 1,
    MSG_TYPE_PL_INSERT = 2,
    MSG_TYPE_PL_REFRESH = 3,
    MSG_TYPE_PL_REMOVE = 4,
    MSG_TYPE_PL_INVALID = 5
}RCMsgType;
</ENUM>
<STRUCT>
<NAME>RCMsgData</NAME>
typedef struct RCMsgData {
    RCMsgType type;
    gpointer data;
}RCMsgData;
</STRUCT>
<FUNCTION>
<NAME>rc_msg_async_queue_watch_new</NAME>
<RETURNS>guint </RETURNS>
GAsyncQueue *queue, gint priority, RCMsgAsyncQueueWatchFunc callback, gpointer data, GDestroyNotify notify, GMainContext *context 
</FUNCTION>
<FUNCTION>
<NAME>rc_msg_init</NAME>
<RETURNS>void </RETURNS>
 
</FUNCTION>
<FUNCTION>
<NAME>rc_msg_push</NAME>
<RETURNS>void </RETURNS>
RCMsgType type, gpointer data 
</FUNCTION>
<MACRO>
<NAME>DEBUG_MODE</NAME>
#define DEBUG_MODE FALSE
</MACRO>
<FUNCTION>
<NAME>rc_debug_get_flag</NAME>
<RETURNS>gboolean </RETURNS>
 
</FUNCTION>
<FUNCTION>
<NAME>rc_debug_set_mode</NAME>
<RETURNS>void </RETURNS>
gboolean mode 
</FUNCTION>
<FUNCTION>
<NAME>rc_debug_print</NAME>
<RETURNS>gint </RETURNS>
const gchar *format, ... 
</FUNCTION>
<FUNCTION>
<NAME>rc_debug_perror</NAME>
<RETURNS>gint </RETURNS>
const gchar *format, ... 
</FUNCTION>
<FUNCTION>
<NAME>rc_debug_pmsg</NAME>
<RETURNS>gint </RETURNS>
const gchar *format, ... 
</FUNCTION>
<FUNCTION>
<NAME>rc_debug_module_pmsg</NAME>
<RETURNS>gint </RETURNS>
const gchar *module_name, const gchar *format, ... 
</FUNCTION>
<FUNCTION>
<NAME>rc_debug_module_print</NAME>
<RETURNS>gint </RETURNS>
const gchar *module_name, const gchar *format, ... 
</FUNCTION>
<FUNCTION>
<NAME>rc_debug_module_perror</NAME>
<RETURNS>gint </RETURNS>
const gchar *module_name, const gchar *format, ... 
</FUNCTION>
<FUNCTION>
<NAME>rc_debug_print_mem_profile</NAME>
<RETURNS>void </RETURNS>
 
</FUNCTION>
<STRUCT>
<NAME>RCCoreData</NAME>
typedef struct RCCoreData {
    GstElement *playbin;
    GstElement *audio_sink;
    GstElement *eq_plugin;
    GstElement *vol_plugin;
    gint64 start_time;
    gint64 end_time;
    gboolean full_mode;
    guint ver_major;
    guint ver_minor;
    guint ver_micro;
    guint ver_nano;
}RCCoreData;
</STRUCT>
<FUNCTION>
<NAME>rc_core_init</NAME>
<RETURNS>void </RETURNS>
 
</FUNCTION>
<FUNCTION>
<NAME>rc_core_exit</NAME>
<RETURNS>void </RETURNS>
 
</FUNCTION>
<FUNCTION>
<NAME>rc_core_get_data</NAME>
<RETURNS>RCCoreData *</RETURNS>
 
</FUNCTION>
<FUNCTION>
<NAME>rc_core_set_uri</NAME>
<RETURNS>void </RETURNS>
const gchar *uri 
</FUNCTION>
<FUNCTION>
<NAME>rc_core_get_uri</NAME>
<RETURNS>gchar *</RETURNS>
 
</FUNCTION>
<FUNCTION>
<NAME>rc_core_play</NAME>
<RETURNS>gboolean </RETURNS>
 
</FUNCTION>
<FUNCTION>
<NAME>rc_core_pause</NAME>
<RETURNS>gboolean </RETURNS>
 
</FUNCTION>
<FUNCTION>
<NAME>rc_core_stop</NAME>
<RETURNS>gboolean </RETURNS>
 
</FUNCTION>
<FUNCTION>
<NAME>rc_core_set_volume</NAME>
<RETURNS>gboolean </RETURNS>
gdouble volume 
</FUNCTION>
<FUNCTION>
<NAME>rc_core_set_play_position</NAME>
<RETURNS>gboolean </RETURNS>
gint64 time 
</FUNCTION>
<FUNCTION>
<NAME>rc_core_set_play_position_by_percent</NAME>
<RETURNS>gboolean </RETURNS>
gdouble percent 
</FUNCTION>
<FUNCTION>
<NAME>rc_core_get_play_position</NAME>
<RETURNS>gint64 </RETURNS>
 
</FUNCTION>
<FUNCTION>
<NAME>rc_core_get_music_length</NAME>
<RETURNS>gint64 </RETURNS>
 
</FUNCTION>
<FUNCTION>
<NAME>rc_core_get_volume</NAME>
<RETURNS>gdouble </RETURNS>
 
</FUNCTION>
<FUNCTION>
<NAME>rc_core_set_eq_effect</NAME>
<RETURNS>void </RETURNS>
gdouble *fq 
</FUNCTION>
<FUNCTION>
<NAME>rc_core_get_play_state</NAME>
<RETURNS>GstState </RETURNS>
 
</FUNCTION>
<FUNCTION>
<NAME>rc_core_set_play_segment</NAME>
<RETURNS>void </RETURNS>
gint64 start_time, gint64 end_time 
</FUNCTION>
<MACRO>
<NAME>MAX_DIR_DEPTH</NAME>
#define MAX_DIR_DEPTH 5
</MACRO>
<FUNCTION>
<NAME>rc_gui_about_player</NAME>
<RETURNS>void </RETURNS>
 
</FUNCTION>
<FUNCTION>
<NAME>rc_gui_show_message_dialog</NAME>
<RETURNS>void </RETURNS>
GtkMessageType type, const gchar *title, const gchar *format, ... 
</FUNCTION>
<FUNCTION>
<NAME>rc_gui_show_open_dialog</NAME>
<RETURNS>void </RETURNS>
 
</FUNCTION>
<FUNCTION>
<NAME>rc_gui_open_music_directory</NAME>
<RETURNS>void </RETURNS>
 
</FUNCTION>
<FUNCTION>
<NAME>rc_gui_save_playlist_dialog</NAME>
<RETURNS>void </RETURNS>
 
</FUNCTION>
<FUNCTION>
<NAME>rc_gui_load_playlist_dialog</NAME>
<RETURNS>void </RETURNS>
 
</FUNCTION>
<FUNCTION>
<NAME>rc_gui_save_all_playlists_dialog</NAME>
<RETURNS>void </RETURNS>
 
</FUNCTION>
<FUNCTION>
<NAME>rc_gui_bind_lyric_file_dialog</NAME>
<RETURNS>void </RETURNS>
 
</FUNCTION>
<FUNCTION>
<NAME>rc_gui_bind_album_file_dialog</NAME>
<RETURNS>void </RETURNS>
 
</FUNCTION>
<STRUCT>
<NAME>RCGuiEQData</NAME>
typedef struct RCGuiEQData {
    GtkWidget *eq_combobox;
    GtkWidget *eq_scales[10];
    GtkWidget *eq_labels[10];
    GtkWidget *db_labels[3];
    GtkWidget *save_button;
    GtkWidget *import_button;
}RCGuiEQData;
</STRUCT>
<FUNCTION>
<NAME>rc_gui_eq_data_init</NAME>
<RETURNS>void </RETURNS>
 
</FUNCTION>
<FUNCTION>
<NAME>rc_gui_eq_init</NAME>
<RETURNS>void </RETURNS>
 
</FUNCTION>
<FUNCTION>
<NAME>rc_gui_eq_get_data</NAME>
<RETURNS>RCGuiEQData *</RETURNS>
 
</FUNCTION>
<MACRO>
<NAME>RC_PLAYER_TYPE</NAME>
#define RC_PLAYER_TYPE (rc_player_get_type())
</MACRO>
<MACRO>
<NAME>RC_PLAYER</NAME>
#define RC_PLAYER(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), RC_PLAYER_TYPE, \
    RCPlayer))
</MACRO>
<MACRO>
<NAME>RC_PLAYER_CLASS</NAME>
#define RC_PLAYER_CLASS(k) (G_TYPE_CHECK_CLASS_CAST((k), RC_PLAYER_TYPE, \
    RCPlayerClass))
</MACRO>
<MACRO>
<NAME>RC_IS_PLAYER</NAME>
#define RC_IS_PLAYER(o) (G_TYPE_CHECK_INSTANCE_TYPE((o), RC_PLAYER_TYPE))
</MACRO>
<MACRO>
<NAME>RB_IS_PLAYER_CLASS</NAME>
#define RB_IS_PLAYER_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE((k), RC_PLAYER_TYPE))
</MACRO>
<MACRO>
<NAME>RB_PLAYER_GET_CLASS</NAME>
#define RB_PLAYER_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS((o), RC_PLAYER_TYPE, \
    RCPlayerClass))
</MACRO>
<STRUCT>
<NAME>RCPlayer</NAME>
typedef struct RCPlayer {
    GObject parent;
}RCPlayer;
</STRUCT>
<STRUCT>
<NAME>RCPlayerClass</NAME>
typedef struct RCPlayerClass {
    GObjectClass parent_class;
    void (*player_play)();
    void (*player_stop)();
    void (*player_pause)();
    void (*player_continue)();
    void (*lyric_found)();
    void (*lyric_not_found)();
    void (*cover_found)();
    void (*cover_not_found)();
}RCPlayerClass;
</STRUCT>
<FUNCTION>
<NAME>rc_player_get_type</NAME>
<RETURNS>GType </RETURNS>
 
</FUNCTION>
<FUNCTION>
<NAME>rc_player_new</NAME>
<RETURNS>RCPlayer *</RETURNS>
 
</FUNCTION>
<FUNCTION>
<NAME>rc_player_object_init</NAME>
<RETURNS>gboolean </RETURNS>
 
</FUNCTION>
<FUNCTION>
<NAME>rc_player_object_get</NAME>
<RETURNS>GObject *</RETURNS>
 
</FUNCTION>
<FUNCTION>
<NAME>rc_player_object_signal_emit_simple</NAME>
<RETURNS>void </RETURNS>
const char *name 
</FUNCTION>
<FUNCTION>
<NAME>rc_player_object_signal_connect_simple</NAME>
<RETURNS>gulong </RETURNS>
const char *name, GCallback callback 
</FUNCTION>
<FUNCTION>
<NAME>rc_player_object_signal_disconnect</NAME>
<RETURNS>void </RETURNS>
gulong id 
</FUNCTION>
<FUNCTION>
<NAME>rc_gui_style_init</NAME>
<RETURNS>void </RETURNS>
 
</FUNCTION>
<FUNCTION>
<NAME>rc_gui_style_refresh</NAME>
<RETURNS>void </RETURNS>
 
</FUNCTION>
<FUNCTION>
<NAME>rc_gui_style_path_search</NAME>
<RETURNS>GSList *</RETURNS>
 
</FUNCTION>
<ENUM>
<NAME>RCPlist1Column</NAME>
typedef enum RCPlist1Column {
    PLIST1_STATE = 0,
    PLIST1_NAME = 1,
    PLIST1_STORE = 2,
    PLIST1_LAST = 3
}RCPlist1Column;
</ENUM>
<ENUM>
<NAME>RCPlist2Column</NAME>
typedef enum RCPlist2Column {
    PLIST2_URI = 0,
    PLIST2_STATE = 1,
    PLIST2_TITLE = 2,
    PLIST2_ORITITLE = 3,
    PLIST2_ARTIST = 4,
    PLIST2_ALBUM = 5,
    PLIST2_LENGTH = 6,
    PLIST2_TRACKNO = 7,
    PLIST2_LRCFILE = 8,
    PLIST2_ALBFILE = 9,
    PLIST2_EXTRA = 10,
    PLIST2_LAST = 11
}RCPlist2Column;
</ENUM>
<FUNCTION>
<NAME>rc_plist_init</NAME>
<RETURNS>gboolean </RETURNS>
 
</FUNCTION>
<FUNCTION>
<NAME>rc_plist_exit</NAME>
<RETURNS>void </RETURNS>
 
</FUNCTION>
<FUNCTION>
<NAME>rc_plist_insert_list</NAME>
<RETURNS>gboolean </RETURNS>
const gchar *listname, gint index 
</FUNCTION>
<FUNCTION>
<NAME>rc_plist_insert_music</NAME>
<RETURNS>gboolean </RETURNS>
const gchar *uri, gint list1_index, gint list2_index 
</FUNCTION>
<FUNCTION>
<NAME>rc_plist_list2_insert_item</NAME>
<RETURNS>void </RETURNS>
const gchar *uri, const gchar *title, const gchar *artist, const gchar *album, gint64 length, gint trackno, GtkListStore *store, gint list2_index 
</FUNCTION>
<FUNCTION>
<NAME>rc_plist_list2_refresh_item</NAME>
<RETURNS>void </RETURNS>
const gchar *uri, const gchar *title, const gchar *artist, const gchar *album, gint64 length, gint trackno, GtkTreeRowReference *reference 
</FUNCTION>
<FUNCTION>
<NAME>rc_plist_list2_remove_item</NAME>
<RETURNS>void </RETURNS>
GtkTreeRowReference *reference 
</FUNCTION>
<FUNCTION>
<NAME>rc_plist_list2_mark_invalid_item</NAME>
<RETURNS>void </RETURNS>
GtkTreeRowReference *reference 
</FUNCTION>
<FUNCTION>
<NAME>rc_plist_remove_list</NAME>
<RETURNS>gboolean </RETURNS>
gint index 
</FUNCTION>
<FUNCTION>
<NAME>rc_plist_get_list1_name</NAME>
<RETURNS>gchar *</RETURNS>
gint index 
</FUNCTION>
<FUNCTION>
<NAME>rc_plist_get_list1_length</NAME>
<RETURNS>gint </RETURNS>
 
</FUNCTION>
<FUNCTION>
<NAME>rc_plist_set_list1_name</NAME>
<RETURNS>void </RETURNS>
gint index, const gchar *name 
</FUNCTION>
<FUNCTION>
<NAME>rc_plist_get_list2_length</NAME>
<RETURNS>gint </RETURNS>
gint index 
</FUNCTION>
<FUNCTION>
<NAME>rc_plist_play_by_index</NAME>
<RETURNS>gboolean </RETURNS>
gint list_index, gint music_index 
</FUNCTION>
<FUNCTION>
<NAME>rc_plist_play_by_uri</NAME>
<RETURNS>gboolean </RETURNS>
const gchar *uri 
</FUNCTION>
<FUNCTION>
<NAME>rc_plist_play_get_index</NAME>
<RETURNS>gboolean </RETURNS>
gint *index1, gint *index2 
</FUNCTION>
<FUNCTION>
<NAME>rc_plist_stop</NAME>
<RETURNS>void </RETURNS>
 
</FUNCTION>
<FUNCTION>
<NAME>rc_plist_play_prev</NAME>
<RETURNS>gboolean </RETURNS>
 
</FUNCTION>
<FUNCTION>
<NAME>rc_plist_play_next</NAME>
<RETURNS>gboolean </RETURNS>
gboolean flag 
</FUNCTION>
<FUNCTION>
<NAME>rc_plist_set_play_mode</NAME>
<RETURNS>void </RETURNS>
gint repeat, gint random 
</FUNCTION>
<FUNCTION>
<NAME>rc_plist_get_play_mode</NAME>
<RETURNS>void </RETURNS>
gint *repeat, gint *random 
</FUNCTION>
<FUNCTION>
<NAME>rc_plist_load_playlist_setting</NAME>
<RETURNS>gboolean </RETURNS>
 
</FUNCTION>
<FUNCTION>
<NAME>rc_plist_save_playlist_setting</NAME>
<RETURNS>gboolean </RETURNS>
 
</FUNCTION>
<FUNCTION>
<NAME>rc_plist_build_default_list</NAME>
<RETURNS>void </RETURNS>
 
</FUNCTION>
<FUNCTION>
<NAME>rc_plist_plist_move2</NAME>
<RETURNS>void </RETURNS>
gint list_index, GtkTreePath **from_paths, gint f_length, gint to_list_index 
</FUNCTION>
<FUNCTION>
<NAME>rc_plist_save_playlist</NAME>
<RETURNS>void </RETURNS>
const gchar *s_filename, gint index 
</FUNCTION>
<FUNCTION>
<NAME>rc_plist_load_playlist</NAME>
<RETURNS>void </RETURNS>
const gchar *s_filename, gint index 
</FUNCTION>
<FUNCTION>
<NAME>rc_plist_get_list_store</NAME>
<RETURNS>GtkListStore *</RETURNS>
gint index 
</FUNCTION>
<FUNCTION>
<NAME>rc_plist_get_list_head</NAME>
<RETURNS>GtkListStore *</RETURNS>
 
</FUNCTION>
<FUNCTION>
<NAME>rc_plist_list2_refresh</NAME>
<RETURNS>gboolean </RETURNS>
gint list1_index 
</FUNCTION>
<FUNCTION>
<NAME>rc_plist_import_job_get_length</NAME>
<RETURNS>gint </RETURNS>
 
</FUNCTION>
<FUNCTION>
<NAME>rc_plist_import_job_cancel</NAME>
<RETURNS>void </RETURNS>
 
</FUNCTION>
<FUNCTION>
<NAME>rc_plist_load_argument</NAME>
<RETURNS>void </RETURNS>
char *argv[] 
</FUNCTION>
<FUNCTION>
<NAME>rc_plist_load_uri_from_remote</NAME>
<RETURNS>gboolean </RETURNS>
const gchar *uri 
</FUNCTION>
<MACRO>
<NAME>RC_GUI_SCROLLED_TEXT_TYPE</NAME>
#define RC_GUI_SCROLLED_TEXT_TYPE (rc_gui_scrolled_text_get_type())
</MACRO>
<MACRO>
<NAME>RC_GUI_SCROLLED_TEXT</NAME>
#define RC_GUI_SCROLLED_TEXT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), \
    RC_GUI_SCROLLED_TEXT_TYPE, RCGuiScrolledText))
</MACRO>
<MACRO>
<NAME>RC_GUI_SCROLLED_TEXT_CLASS</NAME>
#define RC_GUI_SCROLLED_TEXT_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST((klass), \
    RC_GUI_SCROLLED_TEXT_TYPE, RCGuiScrolledTextClass))
</MACRO>
<MACRO>
<NAME>IS_RC_GUI_SCROLLED_TEXT</NAME>
#define IS_RC_GUI_SCROLLED_TEXT(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), \
    RC_GUI_SCROLLED_TEXT_TYPE))
</MACRO>
<MACRO>
<NAME>IS_RC_GUI_SCROLLED_TEXT_CLASS</NAME>
#define IS_RC_GUI_SCROLLED_TEXT_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE((klass), \
    RC_GUI_SCROLLED_TEXT_TYPE))
</MACRO>
<STRUCT>
<NAME>RCGuiScrolledText</NAME>
typedef struct RCGuiScrolledText {
    GtkWidget widget;
}RCGuiScrolledText;
</STRUCT>
<STRUCT>
<NAME>RCGuiScrolledTextClass</NAME>
typedef struct RCGuiScrolledTextClass {
    GtkWidgetClass parent_class;
}RCGuiScrolledTextClass;
</STRUCT>
<FUNCTION>
<NAME>rc_gui_scrolled_text_get_type</NAME>
<RETURNS>GType </RETURNS>
 
</FUNCTION>
<FUNCTION>
<NAME>rc_gui_scrolled_text_new</NAME>
<RETURNS>GtkWidget *</RETURNS>
 
</FUNCTION>
<FUNCTION>
<NAME>rc_gui_scrolled_text_set_text</NAME>
<RETURNS>void </RETURNS>
RCGuiScrolledText *widget, const gchar *text 
</FUNCTION>
<FUNCTION>
<NAME>rc_gui_scrolled_text_get_text</NAME>
<RETURNS>const gchar *</RETURNS>
RCGuiScrolledText *widget 
</FUNCTION>
<FUNCTION>
<NAME>rc_gui_scrolled_text_set_attributes</NAME>
<RETURNS>void </RETURNS>
RCGuiScrolledText *widget, PangoAttrList *attrs 
</FUNCTION>
<FUNCTION>
<NAME>rc_gui_scrolled_text_get_attributes</NAME>
<RETURNS>PangoAttrList *</RETURNS>
RCGuiScrolledText *widget 
</FUNCTION>
<FUNCTION>
<NAME>rc_gui_scrolled_text_set_percent</NAME>
<RETURNS>void </RETURNS>
RCGuiScrolledText *widget, gdouble percent 
</FUNCTION>
<FUNCTION>
<NAME>rc_gui_scrolled_text_get_percent</NAME>
<RETURNS>gdouble </RETURNS>
RCGuiScrolledText *widget 
</FUNCTION>
<FUNCTION>
<NAME>rc_gui_scrolled_text_get_width</NAME>
<RETURNS>gint </RETURNS>
RCGuiScrolledText *widget 
</FUNCTION>
<FUNCTION>
<NAME>rc_gui_treeview_init</NAME>
<RETURNS>void </RETURNS>
 
</FUNCTION>
<FUNCTION>
<NAME>rc_gui_list_tree_reset_list_store</NAME>
<RETURNS>void </RETURNS>
 
</FUNCTION>
<FUNCTION>
<NAME>rc_gui_select_list1</NAME>
<RETURNS>void </RETURNS>
gint list_index 
</FUNCTION>
<FUNCTION>
<NAME>rc_gui_select_list2</NAME>
<RETURNS>void </RETURNS>
gint list_index 
</FUNCTION>
<FUNCTION>
<NAME>rc_gui_list1_new_list</NAME>
<RETURNS>void </RETURNS>
 
</FUNCTION>
<FUNCTION>
<NAME>rc_gui_list1_delete_list</NAME>
<RETURNS>void </RETURNS>
 
</FUNCTION>
<FUNCTION>
<NAME>rc_gui_list1_get_selected_index</NAME>
<RETURNS>gint </RETURNS>
 
</FUNCTION>
<FUNCTION>
<NAME>rc_gui_list2_delete_lists</NAME>
<RETURNS>void </RETURNS>
 
</FUNCTION>
<FUNCTION>
<NAME>rc_gui_list2_select_all</NAME>
<RETURNS>void </RETURNS>
 
</FUNCTION>
<FUNCTION>
<NAME>rc_gui_list1_rename_list</NAME>
<RETURNS>void </RETURNS>
 
</FUNCTION>
<FUNCTION>
<NAME>rc_gui_list1_get_model</NAME>
<RETURNS>GtkTreeModel *</RETURNS>
 
</FUNCTION>
<FUNCTION>
<NAME>rc_gui_list2_get_model</NAME>
<RETURNS>GtkTreeModel *</RETURNS>
 
</FUNCTION>
<FUNCTION>
<NAME>rc_gui_list1_get_cursor</NAME>
<RETURNS>gboolean </RETURNS>
GtkTreeIter *iter 
</FUNCTION>
<FUNCTION>
<NAME>rc_gui_list2_get_cursor</NAME>
<RETURNS>gboolean </RETURNS>
GtkTreeIter *iter 
</FUNCTION>
<STRUCT>
<NAME>RCGuiData</NAME>
typedef struct RCGuiData {
    GtkUIManager *main_ui;
    GtkActionGroup *main_action_group;
    GtkWidget *main_window;
    GtkWidget *eq_vbox;
    GtkWidget *plist_notebook;
    GtkWidget *title_label, *artist_label, *album_label;
    GtkWidget *time_label, *length_label, *info_label;
    GtkWidget *album_image, *album_eventbox, *album_frame;
    GtkWidget *control_images[5];
    GtkWidget *control_buttons[5];
    GtkWidget *volume_button;
    GtkWidget *time_scroll_bar;
    GtkWidget *lrc_scrolled_label;
    GtkWidget *list1_tree_view, *list2_tree_view;
    GtkWidget *list1_scr_window, *list2_scr_window;
    GtkWidget *status_infobar, *status_progress, *status_label;
    GtkWidget *list_hpaned;
    GtkTreeModel *list1_tree_model, *list2_tree_model;
    GtkTreeSelection *list1_selection, *list2_selection;
    GtkCellRenderer *renderer_text[5];
    GtkCellRenderer *renderer_pixbuf[2];
    guint main_window_width;
    guint main_window_height;
    guint status_task_length;
    gboolean update_seek_scale_flag;
    guint time_info_refresh_timeout;
    GtkTreeRowReference *list1_selected_reference;
    GdkPixbuf *no_cover_image;
    GdkPixbuf *icon_image;
    GtkStatusIcon *tray_icon;
}RCGuiData;
</STRUCT>
<STRUCT>
<NAME>RCMusicMetaData</NAME>
struct RCMusicMetaData;
</STRUCT>
<FUNCTION>
<NAME>rc_gui_get_data</NAME>
<RETURNS>RCGuiData *</RETURNS>
 
</FUNCTION>
<FUNCTION>
<NAME>rc_gui_init</NAME>
<RETURNS>gboolean </RETURNS>
 
</FUNCTION>
<FUNCTION>
<NAME>rc_gui_quit_player</NAME>
<RETURNS>void </RETURNS>
 
</FUNCTION>
<FUNCTION>
<NAME>rc_gui_music_info_set_data</NAME>
<RETURNS>void </RETURNS>
const gchar *title, const struct RCMusicMetaData *data 
</FUNCTION>
<FUNCTION>
<NAME>rc_gui_time_label_set_text</NAME>
<RETURNS>void </RETURNS>
gint64 time 
</FUNCTION>
<FUNCTION>
<NAME>rc_gui_set_play_button_state</NAME>
<RETURNS>void </RETURNS>
gboolean state 
</FUNCTION>
<FUNCTION>
<NAME>rc_gui_seek_scaler_disable</NAME>
<RETURNS>void </RETURNS>
 
</FUNCTION>
<FUNCTION>
<NAME>rc_gui_seek_scaler_enable</NAME>
<RETURNS>void </RETURNS>
 
</FUNCTION>
<FUNCTION>
<NAME>rc_gui_set_volume</NAME>
<RETURNS>void </RETURNS>
gdouble volume 
</FUNCTION>
<FUNCTION>
<NAME>rc_gui_set_player_mode</NAME>
<RETURNS>void </RETURNS>
 
</FUNCTION>
<FUNCTION>
<NAME>rc_gui_set_cover_image_by_file</NAME>
<RETURNS>gboolean </RETURNS>
const gchar *filename 
</FUNCTION>
<FUNCTION>
<NAME>rc_gui_set_cover_image_by_buf</NAME>
<RETURNS>gboolean </RETURNS>
const GstBuffer *buf 
</FUNCTION>
<FUNCTION>
<NAME>rc_gui_status_task_set</NAME>
<RETURNS>void </RETURNS>
guint type, guint len 
</FUNCTION>
<FUNCTION>
<NAME>rc_gui_status_progress_set_progress</NAME>
<RETURNS>void </RETURNS>
 
</FUNCTION>
<FUNCTION>
<NAME>rc_gui_view_add_page</NAME>
<RETURNS>guint </RETURNS>
const gchar *name, const gchar *title, GtkWidget *widget 
</FUNCTION>
<FUNCTION>
<NAME>rc_gui_view_add_page_with_label</NAME>
<RETURNS>guint </RETURNS>
const gchar *name, const gchar *title, const gchar *label_text, GtkWidget *widget 
</FUNCTION>
<FUNCTION>
<NAME>rc_gui_view_remove_page</NAME>
<RETURNS>gboolean </RETURNS>
guint id 
</FUNCTION>
<FUNCTION>
<NAME>rc_gui_get_tray_icon</NAME>
<RETURNS>GtkStatusIcon *</RETURNS>
 
</FUNCTION>
<FUNCTION>
<NAME>rc_gui_get_ui_manager</NAME>
<RETURNS>GtkUIManager *</RETURNS>
 
</FUNCTION>
<FUNCTION>
<NAME>rc_gui_get_action_group</NAME>
<RETURNS>GtkActionGroup *</RETURNS>
 
</FUNCTION>
<FUNCTION>
<NAME>rc_gui_get_main_window</NAME>
<RETURNS>GtkWidget *</RETURNS>
 
</FUNCTION>
<FUNCTION>
<NAME>rc_gui_get_icon_image</NAME>
<RETURNS>const GdkPixbuf *</RETURNS>
 
</FUNCTION>
<FUNCTION>
<NAME>rc_gui_get_no_cover_image</NAME>
<RETURNS>const GdkPixbuf *</RETURNS>
 
</FUNCTION>
<FUNCTION>
<NAME>rc_gui_get_cover_image</NAME>
<RETURNS>const GdkPixbuf *</RETURNS>
 
</FUNCTION>
<FUNCTION>
<NAME>rc_gui_mini_init</NAME>
<RETURNS>void </RETURNS>
 
</FUNCTION>
<FUNCTION>
<NAME>rc_gui_mini_get_data</NAME>
<RETURNS>RCGuiMiniData *</RETURNS>
 
</FUNCTION>
<FUNCTION>
<NAME>rc_gui_mini_set_info_text</NAME>
<RETURNS>void </RETURNS>
const gchar *text 
</FUNCTION>
<FUNCTION>
<NAME>rc_gui_mini_set_lyric_text</NAME>
<RETURNS>void </RETURNS>
const gchar *text 
</FUNCTION>
<FUNCTION>
<NAME>rc_gui_mini_info_text_move</NAME>
<RETURNS>void </RETURNS>
 
</FUNCTION>
<FUNCTION>
<NAME>rc_gui_mini_set_lyric_percent</NAME>
<RETURNS>void </RETURNS>
gdouble percent 
</FUNCTION>
<FUNCTION>
<NAME>rc_gui_mini_set_play_state</NAME>
<RETURNS>void </RETURNS>
gboolean state 
</FUNCTION>
<FUNCTION>
<NAME>rc_gui_mini_set_time_text</NAME>
<RETURNS>void </RETURNS>
gint64 pos 
</FUNCTION>
<FUNCTION>
<NAME>rc_gui_mini_window_hide</NAME>
<RETURNS>void </RETURNS>
 
</FUNCTION>
<FUNCTION>
<NAME>rc_gui_mini_window_show</NAME>
<RETURNS>void </RETURNS>
 
</FUNCTION>
<FUNCTION>
<NAME>rc_gui_mini_mini_mode_clicked</NAME>
<RETURNS>void </RETURNS>
 
</FUNCTION>
<FUNCTION>
<NAME>rc_gui_mini_normal_mode_clicked</NAME>
<RETURNS>void </RETURNS>
 
</FUNCTION>
<FUNCTION>
<NAME>rc_gui_create_setting_window</NAME>
<RETURNS>void </RETURNS>
 
</FUNCTION>
<MACRO>
<NAME>GETTEXT_PACKAGE</NAME>
#define GETTEXT_PACKAGE "RhythmCat"
</MACRO>
<FUNCTION>
<NAME>rc_player_init</NAME>
<RETURNS>void </RETURNS>
int *argc, char **argv[] 
</FUNCTION>
<FUNCTION>
<NAME>rc_player_main</NAME>
<RETURNS>void </RETURNS>
 
</FUNCTION>
<FUNCTION>
<NAME>rc_player_exit</NAME>
<RETURNS>void </RETURNS>
 
</FUNCTION>
<FUNCTION>
<NAME>rc_player_get_program_name</NAME>
<RETURNS>const gchar *</RETURNS>
 
</FUNCTION>
<FUNCTION>
<NAME>rc_player_get_authors</NAME>
<RETURNS>const gchar *const *</RETURNS>
 
</FUNCTION>
<FUNCTION>
<NAME>rc_player_get_documenters</NAME>
<RETURNS>const gchar *const *</RETURNS>
 
</FUNCTION>
<FUNCTION>
<NAME>rc_player_get_artists</NAME>
<RETURNS>const gchar *const *</RETURNS>
 
</FUNCTION>
<FUNCTION>
<NAME>rc_player_get_build_date</NAME>
<RETURNS>const gchar *</RETURNS>
 
</FUNCTION>
<FUNCTION>
<NAME>rc_player_get_version</NAME>
<RETURNS>const gchar *</RETURNS>
 
</FUNCTION>
<FUNCTION>
<NAME>rc_player_get_stable_flag</NAME>
<RETURNS>gboolean </RETURNS>
 
</FUNCTION>
<FUNCTION>
<NAME>rc_player_get_conf_dir</NAME>
<RETURNS>const gchar *</RETURNS>
 
</FUNCTION>
<FUNCTION>
<NAME>rc_player_get_data_dir</NAME>
<RETURNS>const gchar *</RETURNS>
 
</FUNCTION>
<FUNCTION>
<NAME>rc_player_get_home_dir</NAME>
<RETURNS>const gchar *</RETURNS>
 
</FUNCTION>
<FUNCTION>
<NAME>rc_player_get_locale</NAME>
<RETURNS>const gchar *</RETURNS>
 
</FUNCTION>
<FUNCTION>
<NAME>rc_player_check_supported_format</NAME>
<RETURNS>gboolean </RETURNS>
const gchar *filename 
</FUNCTION>
<FUNCTION>
<NAME>rc_player_get_elapsed_time</NAME>
<RETURNS>gdouble </RETURNS>
 
</FUNCTION>
<FUNCTION>
<NAME>rc_set_init</NAME>
<RETURNS>void </RETURNS>
 
</FUNCTION>
<FUNCTION>
<NAME>rc_set_exit</NAME>
<RETURNS>void </RETURNS>
 
</FUNCTION>
<FUNCTION>
<NAME>rc_set_get_string</NAME>
<RETURNS>gchar *</RETURNS>
const gchar *group_name, const gchar *key, GError **error 
</FUNCTION>
<FUNCTION>
<NAME>rc_set_get_integer</NAME>
<RETURNS>gint </RETURNS>
const gchar *group_name, const gchar *key, GError **error 
</FUNCTION>
<FUNCTION>
<NAME>rc_set_get_double</NAME>
<RETURNS>gdouble </RETURNS>
const gchar *group_name, const gchar *key, GError **error 
</FUNCTION>
<FUNCTION>
<NAME>rc_set_get_boolean</NAME>
<RETURNS>gboolean </RETURNS>
const gchar *group_name, const gchar *key, GError **error 
</FUNCTION>
<FUNCTION>
<NAME>rc_set_get_string_list</NAME>
<RETURNS>gchar **</RETURNS>
const gchar *group_name, const gchar *key, gsize *length, GError **error 
</FUNCTION>
<FUNCTION>
<NAME>rc_set_get_boolean_list</NAME>
<RETURNS>gboolean *</RETURNS>
const gchar *group_name, const gchar *key, gsize *length, GError **error 
</FUNCTION>
<FUNCTION>
<NAME>rc_set_get_integer_list</NAME>
<RETURNS>gint *</RETURNS>
const gchar *group_name, const gchar *key, gsize *length, GError **error 
</FUNCTION>
<FUNCTION>
<NAME>rc_set_get_double_list</NAME>
<RETURNS>gdouble *</RETURNS>
const gchar *group_name, const gchar *key, gsize *length, GError **error 
</FUNCTION>
<FUNCTION>
<NAME>rc_set_set_string</NAME>
<RETURNS>void </RETURNS>
const gchar *group_name, const gchar *key, const gchar *string 
</FUNCTION>
<FUNCTION>
<NAME>rc_set_set_boolean</NAME>
<RETURNS>void </RETURNS>
const gchar *group_name, const gchar *key, gboolean value 
</FUNCTION>
<FUNCTION>
<NAME>rc_set_set_integer</NAME>
<RETURNS>void </RETURNS>
const gchar *group_name, const gchar *key, gint value 
</FUNCTION>
<FUNCTION>
<NAME>rc_set_set_double</NAME>
<RETURNS>void </RETURNS>
const gchar *group_name, const gchar *key, gdouble value 
</FUNCTION>
<FUNCTION>
<NAME>rc_set_set_string_list</NAME>
<RETURNS>void </RETURNS>
const gchar *group_name, const gchar *key, const gchar * const list[], gsize length 
</FUNCTION>
<FUNCTION>
<NAME>rc_set_set_boolean_list</NAME>
<RETURNS>void </RETURNS>
const gchar *group_name, const gchar *key, gboolean list[], gsize length 
</FUNCTION>
<FUNCTION>
<NAME>rc_set_set_integer_list</NAME>
<RETURNS>void </RETURNS>
const gchar *group_name, const gchar *key, gint list[], gsize length 
</FUNCTION>
<FUNCTION>
<NAME>rc_set_set_double_list</NAME>
<RETURNS>void </RETURNS>
const gchar *group_name, const gchar *key, gdouble list[], gsize length 
</FUNCTION>
<FUNCTION>
<NAME>rc_set_has_key</NAME>
<RETURNS>gboolean </RETURNS>
const gchar *group_name, gchar *key, GError **error 
</FUNCTION>
<FUNCTION>
<NAME>rc_set_load_setting</NAME>
<RETURNS>gboolean </RETURNS>
const gchar *filename 
</FUNCTION>
<FUNCTION>
<NAME>rc_set_save_setting</NAME>
<RETURNS>void </RETURNS>
const gchar *filename 
</FUNCTION>
<FUNCTION>
<NAME>rc_set_get_plugin_configure</NAME>
<RETURNS>GKeyFile *</RETURNS>
 
</FUNCTION>
