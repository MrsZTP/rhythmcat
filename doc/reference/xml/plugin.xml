<?xml version="1.0"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN"
               "http://www.oasis-open.org/docbook/xml/4.3/docbookx.dtd"
[
  <!ENTITY % local.common.attrib "xmlns:xi  CDATA  #FIXED 'http://www.w3.org/2003/XInclude'">
]>
<refentry id="RhythmCat-Plugin-Support">
<refmeta>
<refentrytitle role="top_of_page" id="RhythmCat-Plugin-Support.top_of_page">Plugin Support</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>
  RHYTHMCAT Library
</refmiscinfo>
</refmeta>
<refnamediv>
<refname>Plugin Support</refname>
<refpurpose>Plugin support of the player.</refpurpose>
</refnamediv>

<refsynopsisdiv id="RhythmCat-Plugin-Support.synopsis" role="synopsis">
<title role="synopsis.title">Synopsis</title>

<synopsis>
#include &lt;plugin.h&gt;

#define             <link linkend="RC-PLUGIN-MAGIC-NUMBER:CAPS">RC_PLUGIN_MAGIC_NUMBER</link>
#define             <link linkend="RC-PLUGIN-OLD-MAGIC-NUMBER:CAPS">RC_PLUGIN_OLD_MAGIC_NUMBER</link>
enum                <link linkend="RCPluginType">RCPluginType</link>;
                    <link linkend="RCPluginConfData">RCPluginConfData</link>;
                    <link linkend="RCPluginModuleData">RCPluginModuleData</link>;
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="rc-plugin-init">rc_plugin_init</link>                      ();
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="rc-plugin-exit">rc_plugin_exit</link>                      ();
<link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>            <link linkend="rc-plugin-search-dir">rc_plugin_search_dir</link>                (<parameter>const <link linkend="gchar"><type>gchar</type></link> *dirname</parameter>);
const <link linkend="GSList"><returnvalue>GSList</returnvalue></link> *      <link linkend="rc-plugin-get-list">rc_plugin_get_list</link>                  ();
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="rc-plugin-list-free">rc_plugin_list_free</link>                 ();
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="rc-plugin-conf-free">rc_plugin_conf_free</link>                 (<parameter><link linkend="RCPluginConfData"><type>RCPluginConfData</type></link> *plugin_data</parameter>);
<link linkend="RCPluginConfData"><returnvalue>RCPluginConfData</returnvalue></link> *  <link linkend="rc-plugin-conf-load">rc_plugin_conf_load</link>                 (<parameter>const <link linkend="gchar"><type>gchar</type></link> *filename</parameter>);
<link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>            <link linkend="rc-plugin-load">rc_plugin_load</link>                      (<parameter><link linkend="RCPluginType"><type>RCPluginType</type></link> type</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *filename</parameter>);
<link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>            <link linkend="rc-plugin-configure">rc_plugin_configure</link>                 (<parameter><link linkend="RCPluginType"><type>RCPluginType</type></link> type</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *filename</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="rc-plugin-close">rc_plugin_close</link>                     (<parameter><link linkend="RCPluginType"><type>RCPluginType</type></link> type</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *filename</parameter>);
<link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>            <link linkend="rc-plugin-check-running">rc_plugin_check_running</link>             (<parameter><link linkend="RCPluginType"><type>RCPluginType</type></link> type</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *path</parameter>);
<link linkend="GSList"><returnvalue>GSList</returnvalue></link> *            <link linkend="rc-plugin-check-exist">rc_plugin_check_exist</link>               (<parameter><link linkend="RCPluginType"><type>RCPluginType</type></link> type</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *name</parameter>);
const <link linkend="gchar"><returnvalue>gchar</returnvalue></link> *       <link linkend="rc-plugin-get-path">rc_plugin_get_path</link>                  (<parameter><link linkend="RCPluginType"><type>RCPluginType</type></link> type</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *group_name</parameter>);
</synopsis>
</refsynopsisdiv>

<refsect1 id="RhythmCat-Plugin-Support.description" role="desc">
<title role="desc.title">Description</title>
<para>
Plugin support of the player. It supports module type (usually it is
a dynamic link library) plugin.
</para>
</refsect1>
<refsect1 id="RhythmCat-Plugin-Support.details" role="details">
<title role="details.title">Details</title>
<refsect2 id="RC-PLUGIN-MAGIC-NUMBER:CAPS" role="macro">
<title>RC_PLUGIN_MAGIC_NUMBER</title>
<indexterm zone="RC-PLUGIN-MAGIC-NUMBER:CAPS"><primary>RC_PLUGIN_MAGIC_NUMBER</primary></indexterm>
<programlisting>#define RC_PLUGIN_MAGIC_NUMBER 0x100B0916
</programlisting>
</refsect2>
<refsect2 id="RC-PLUGIN-OLD-MAGIC-NUMBER:CAPS" role="macro">
<title>RC_PLUGIN_OLD_MAGIC_NUMBER</title>
<indexterm zone="RC-PLUGIN-OLD-MAGIC-NUMBER:CAPS"><primary>RC_PLUGIN_OLD_MAGIC_NUMBER</primary></indexterm>
<programlisting>#define RC_PLUGIN_OLD_MAGIC_NUMBER 0x100B090B
</programlisting>
</refsect2>
<refsect2 id="RCPluginType" role="enum">
<title>enum RCPluginType</title>
<indexterm zone="RCPluginType"><primary>RCPluginType</primary></indexterm>
<programlisting>typedef enum RCPluginType {
    PLUGIN_TYPE_MODULE = 1
}RCPluginType;
</programlisting>
<para>
The enum type to show the type of the plugin.
</para><variablelist role="enum">
<varlistentry id="PLUGIN-TYPE-MODULE:CAPS" role="constant">
<term><literal>PLUGIN_TYPE_MODULE</literal></term>
<listitem><simpara>the plugin is a module
</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2 id="RCPluginConfData" role="struct">
<title>RCPluginConfData</title>
<indexterm zone="RCPluginConfData"><primary>RCPluginConfData</primary></indexterm>
<programlisting>typedef struct {
    gchar *path;
    gchar *name;
    gchar *desc;
    gchar *author;
    gchar *version;
    gchar *website;
    RCPluginType type;
} RCPluginConfData;
</programlisting>
<para>
The plugin configuration data structure.
</para><variablelist role="struct">
<varlistentry><term><link linkend="gchar"><type>gchar</type></link>&#160;*<structfield id="RCPluginConfData.path">path</structfield>;</term>
<listitem><simpara>the path of the plugin file
</simpara></listitem>
</varlistentry>
<varlistentry><term><link linkend="gchar"><type>gchar</type></link>&#160;*<structfield id="RCPluginConfData.name">name</structfield>;</term>
<listitem><simpara>the name of the plugin
</simpara></listitem>
</varlistentry>
<varlistentry><term><link linkend="gchar"><type>gchar</type></link>&#160;*<structfield id="RCPluginConfData.desc">desc</structfield>;</term>
<listitem><simpara>the description of the plugin
</simpara></listitem>
</varlistentry>
<varlistentry><term><link linkend="gchar"><type>gchar</type></link>&#160;*<structfield id="RCPluginConfData.author">author</structfield>;</term>
<listitem><simpara>the author of the plugin
</simpara></listitem>
</varlistentry>
<varlistentry><term><link linkend="gchar"><type>gchar</type></link>&#160;*<structfield id="RCPluginConfData.version">version</structfield>;</term>
<listitem><simpara>the version of the plugin
</simpara></listitem>
</varlistentry>
<varlistentry><term><link linkend="gchar"><type>gchar</type></link>&#160;*<structfield id="RCPluginConfData.website">website</structfield>;</term>
<listitem><simpara>the website of the plugin
</simpara></listitem>
</varlistentry>
<varlistentry><term><link linkend="RCPluginType"><type>RCPluginType</type></link>&#160;<structfield id="RCPluginConfData.type">type</structfield>;</term>
<listitem><simpara>the type of the plugin
</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2 id="RCPluginModuleData" role="struct">
<title>RCPluginModuleData</title>
<indexterm zone="RCPluginModuleData"><primary>RCPluginModuleData</primary></indexterm>
<programlisting>typedef struct {
    guint32 magic_number;
    gchar *group_name;
    gchar *path;
    gboolean resident;
    GQuark id;
    gboolean busy_flag;
} RCPluginModuleData;
</programlisting>
<para>
The data structure of module.
</para><variablelist role="struct">
<varlistentry><term><link linkend="guint32"><type>guint32</type></link>&#160;<structfield id="RCPluginModuleData.magic-number">magic_number</structfield>;</term>
<listitem><simpara>the magic number
</simpara></listitem>
</varlistentry>
<varlistentry><term><link linkend="gchar"><type>gchar</type></link>&#160;*<structfield id="RCPluginModuleData.group-name">group_name</structfield>;</term>
<listitem><simpara>the group name used in plugin configure file
</simpara></listitem>
</varlistentry>
<varlistentry><term><link linkend="gchar"><type>gchar</type></link>&#160;*<structfield id="RCPluginModuleData.path">path</structfield>;</term>
<listitem><simpara>the plugin path (can only be accessed when the plugin is running)
</simpara></listitem>
</varlistentry>
<varlistentry><term><link linkend="gboolean"><type>gboolean</type></link>&#160;<structfield id="RCPluginModuleData.resident">resident</structfield>;</term>
<listitem><simpara>whether the plugin can be removed while the player is running
</simpara></listitem>
</varlistentry>
<varlistentry><term><link linkend="GQuark"><type>GQuark</type></link>&#160;<structfield id="RCPluginModuleData.id">id</structfield>;</term>
<listitem><simpara>the unique ID when the plugin is running
</simpara></listitem>
</varlistentry>
<varlistentry><term><link linkend="gboolean"><type>gboolean</type></link>&#160;<structfield id="RCPluginModuleData.busy-flag">busy_flag</structfield>;</term>
<listitem><simpara>whether the plugin is busy (cannot be interruped)
</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2 id="rc-plugin-init" role="function">
<title>rc_plugin_init ()</title>
<indexterm zone="rc-plugin-init"><primary>rc_plugin_init</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                rc_plugin_init                      ();</programlisting>
<para>
Initialize the plugin support of the player. Can be used only once.
</para></refsect2>
<refsect2 id="rc-plugin-exit" role="function">
<title>rc_plugin_exit ()</title>
<indexterm zone="rc-plugin-exit"><primary>rc_plugin_exit</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                rc_plugin_exit                      ();</programlisting>
<para>
Free and close all plugins when exits.
</para></refsect2>
<refsect2 id="rc-plugin-search-dir" role="function">
<title>rc_plugin_search_dir ()</title>
<indexterm zone="rc-plugin-search-dir"><primary>rc_plugin_search_dir</primary></indexterm>
<programlisting><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>            rc_plugin_search_dir                (<parameter>const <link linkend="gchar"><type>gchar</type></link> *dirname</parameter>);</programlisting>
<para>
Search all plugins in a directory. And save them in a list.
</para><variablelist role="params">
<varlistentry><term><parameter>dirname</parameter>&#160;:</term>
<listitem><simpara>the path of the directory
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> Whether the directory has plugin.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="rc-plugin-get-list" role="function">
<title>rc_plugin_get_list ()</title>
<indexterm zone="rc-plugin-get-list"><primary>rc_plugin_get_list</primary></indexterm>
<programlisting>const <link linkend="GSList"><returnvalue>GSList</returnvalue></link> *      rc_plugin_get_list                  ();</programlisting>
<para>
Return all plugins in the plugin list found before.
</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> The plugin list found before.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="rc-plugin-list-free" role="function">
<title>rc_plugin_list_free ()</title>
<indexterm zone="rc-plugin-list-free"><primary>rc_plugin_list_free</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                rc_plugin_list_free                 ();</programlisting>
<para>
Free and clean the plugin list.
</para></refsect2>
<refsect2 id="rc-plugin-conf-free" role="function">
<title>rc_plugin_conf_free ()</title>
<indexterm zone="rc-plugin-conf-free"><primary>rc_plugin_conf_free</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                rc_plugin_conf_free                 (<parameter><link linkend="RCPluginConfData"><type>RCPluginConfData</type></link> *plugin_data</parameter>);</programlisting>
<para>
Free the plugin configure data.
</para><variablelist role="params">
<varlistentry><term><parameter>plugin_data</parameter>&#160;:</term>
<listitem><simpara>the plugin configure data
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="rc-plugin-conf-load" role="function">
<title>rc_plugin_conf_load ()</title>
<indexterm zone="rc-plugin-conf-load"><primary>rc_plugin_conf_load</primary></indexterm>
<programlisting><link linkend="RCPluginConfData"><returnvalue>RCPluginConfData</returnvalue></link> *  rc_plugin_conf_load                 (<parameter>const <link linkend="gchar"><type>gchar</type></link> *filename</parameter>);</programlisting>
<para>
Open a configuration file.
</para><variablelist role="params">
<varlistentry><term><parameter>filename</parameter>&#160;:</term>
<listitem><simpara>the configuration file to open
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> The configuration data read from the file, NULL if error
   happens.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="rc-plugin-load" role="function">
<title>rc_plugin_load ()</title>
<indexterm zone="rc-plugin-load"><primary>rc_plugin_load</primary></indexterm>
<programlisting><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>            rc_plugin_load                      (<parameter><link linkend="RCPluginType"><type>RCPluginType</type></link> type</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *filename</parameter>);</programlisting>
<para>
Open and run the plugin.
</para><variablelist role="params">
<varlistentry><term><parameter>type</parameter>&#160;:</term>
<listitem><simpara>the type of the plugin
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>filename</parameter>&#160;:</term>
<listitem><simpara>the path of the plugin
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> Whether the operation succeeds.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="rc-plugin-configure" role="function">
<title>rc_plugin_configure ()</title>
<indexterm zone="rc-plugin-configure"><primary>rc_plugin_configure</primary></indexterm>
<programlisting><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>            rc_plugin_configure                 (<parameter><link linkend="RCPluginType"><type>RCPluginType</type></link> type</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *filename</parameter>);</programlisting>
<para>
Open and configure the plugin.
</para><variablelist role="params">
<varlistentry><term><parameter>type</parameter>&#160;:</term>
<listitem><simpara>the type of the plugin
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>filename</parameter>&#160;:</term>
<listitem><simpara>the path of the plugin
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> Whether the operation succeeds.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="rc-plugin-close" role="function">
<title>rc_plugin_close ()</title>
<indexterm zone="rc-plugin-close"><primary>rc_plugin_close</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                rc_plugin_close                     (<parameter><link linkend="RCPluginType"><type>RCPluginType</type></link> type</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *filename</parameter>);</programlisting>
<para>
Close the plugin.
</para><variablelist role="params">
<varlistentry><term><parameter>type</parameter>&#160;:</term>
<listitem><simpara>the type of the plugin
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>filename</parameter>&#160;:</term>
<listitem><simpara>the path of the plugin
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="rc-plugin-check-running" role="function">
<title>rc_plugin_check_running ()</title>
<indexterm zone="rc-plugin-check-running"><primary>rc_plugin_check_running</primary></indexterm>
<programlisting><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>            rc_plugin_check_running             (<parameter><link linkend="RCPluginType"><type>RCPluginType</type></link> type</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *path</parameter>);</programlisting>
<para>
Check if the plugin is running.
</para><variablelist role="params">
<varlistentry><term><parameter>type</parameter>&#160;:</term>
<listitem><simpara>the type of the plugin
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>path</parameter>&#160;:</term>
<listitem><simpara>the path of the plugin
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> Whether the plugin is running.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="rc-plugin-check-exist" role="function">
<title>rc_plugin_check_exist ()</title>
<indexterm zone="rc-plugin-check-exist"><primary>rc_plugin_check_exist</primary></indexterm>
<programlisting><link linkend="GSList"><returnvalue>GSList</returnvalue></link> *            rc_plugin_check_exist               (<parameter><link linkend="RCPluginType"><type>RCPluginType</type></link> type</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *name</parameter>);</programlisting>
<para>
Check if the plugin configure data exists, if it is found, return
the configure data item, otherwise NULL.
</para><variablelist role="params">
<varlistentry><term><parameter>type</parameter>&#160;:</term>
<listitem><simpara>the type of the plugin
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>name</parameter>&#160;:</term>
<listitem><simpara>the name of the plugin in configure file
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> The plugin configure data item if the configure data exists,
NULL if not found.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="rc-plugin-get-path" role="function">
<title>rc_plugin_get_path ()</title>
<indexterm zone="rc-plugin-get-path"><primary>rc_plugin_get_path</primary></indexterm>
<programlisting>const <link linkend="gchar"><returnvalue>gchar</returnvalue></link> *       rc_plugin_get_path                  (<parameter><link linkend="RCPluginType"><type>RCPluginType</type></link> type</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *group_name</parameter>);</programlisting>
<para>
Get the file path of the plugin by the given group name.
</para><variablelist role="params">
<varlistentry><term><parameter>type</parameter>&#160;:</term>
<listitem><simpara>the type of the plugin
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>group_name</parameter>&#160;:</term>
<listitem><simpara>the group name of the plugin
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> The file path of the plugin, NULL if not found.
</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>

</refentry>
