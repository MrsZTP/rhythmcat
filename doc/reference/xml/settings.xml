<?xml version="1.0"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN"
               "http://www.oasis-open.org/docbook/xml/4.3/docbookx.dtd"
[
  <!ENTITY % local.common.attrib "xmlns:xi  CDATA  #FIXED 'http://www.w3.org/2003/XInclude'">
]>
<refentry id="RhythmCat-Settings">
<refmeta>
<refentrytitle role="top_of_page" id="RhythmCat-Settings.top_of_page">Settings</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>
  RHYTHMCAT Library
</refmiscinfo>
</refmeta>
<refnamediv>
<refname>Settings</refname>
<refpurpose>Manage the settings of the player.</refpurpose>
</refnamediv>

<refsynopsisdiv id="RhythmCat-Settings.synopsis" role="synopsis">
<title role="synopsis.title">Synopsis</title>

<synopsis>
#include &lt;settings.h&gt;

<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="rc-set-init">rc_set_init</link>                         ();
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="rc-set-exit">rc_set_exit</link>                         ();
<link linkend="gchar"><returnvalue>gchar</returnvalue></link> *             <link linkend="rc-set-get-string">rc_set_get_string</link>                   (<parameter>const <link linkend="gchar"><type>gchar</type></link> *group_name</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *key</parameter>,
                                                         <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);
<link linkend="gint"><returnvalue>gint</returnvalue></link>                <link linkend="rc-set-get-integer">rc_set_get_integer</link>                  (<parameter>const <link linkend="gchar"><type>gchar</type></link> *group_name</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *key</parameter>,
                                                         <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);
<link linkend="gdouble"><returnvalue>gdouble</returnvalue></link>             <link linkend="rc-set-get-double">rc_set_get_double</link>                   (<parameter>const <link linkend="gchar"><type>gchar</type></link> *group_name</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *key</parameter>,
                                                         <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);
<link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>            <link linkend="rc-set-get-boolean">rc_set_get_boolean</link>                  (<parameter>const <link linkend="gchar"><type>gchar</type></link> *group_name</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *key</parameter>,
                                                         <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);
<link linkend="gchar"><returnvalue>gchar</returnvalue></link> **            <link linkend="rc-set-get-string-list">rc_set_get_string_list</link>              (<parameter>const <link linkend="gchar"><type>gchar</type></link> *group_name</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *key</parameter>,
                                                         <parameter><link linkend="gsize"><type>gsize</type></link> *length</parameter>,
                                                         <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);
<link linkend="gboolean"><returnvalue>gboolean</returnvalue></link> *          <link linkend="rc-set-get-boolean-list">rc_set_get_boolean_list</link>             (<parameter>const <link linkend="gchar"><type>gchar</type></link> *group_name</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *key</parameter>,
                                                         <parameter><link linkend="gsize"><type>gsize</type></link> *length</parameter>,
                                                         <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);
<link linkend="gint"><returnvalue>gint</returnvalue></link> *              <link linkend="rc-set-get-integer-list">rc_set_get_integer_list</link>             (<parameter>const <link linkend="gchar"><type>gchar</type></link> *group_name</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *key</parameter>,
                                                         <parameter><link linkend="gsize"><type>gsize</type></link> *length</parameter>,
                                                         <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);
<link linkend="gdouble"><returnvalue>gdouble</returnvalue></link> *           <link linkend="rc-set-get-double-list">rc_set_get_double_list</link>              (<parameter>const <link linkend="gchar"><type>gchar</type></link> *group_name</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *key</parameter>,
                                                         <parameter><link linkend="gsize"><type>gsize</type></link> *length</parameter>,
                                                         <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="rc-set-set-string">rc_set_set_string</link>                   (<parameter>const <link linkend="gchar"><type>gchar</type></link> *group_name</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *key</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *string</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="rc-set-set-boolean">rc_set_set_boolean</link>                  (<parameter>const <link linkend="gchar"><type>gchar</type></link> *group_name</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *key</parameter>,
                                                         <parameter><link linkend="gboolean"><type>gboolean</type></link> value</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="rc-set-set-integer">rc_set_set_integer</link>                  (<parameter>const <link linkend="gchar"><type>gchar</type></link> *group_name</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *key</parameter>,
                                                         <parameter><link linkend="gint"><type>gint</type></link> value</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="rc-set-set-double">rc_set_set_double</link>                   (<parameter>const <link linkend="gchar"><type>gchar</type></link> *group_name</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *key</parameter>,
                                                         <parameter><link linkend="gdouble"><type>gdouble</type></link> value</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="rc-set-set-string-list">rc_set_set_string_list</link>              (<parameter>const <link linkend="gchar"><type>gchar</type></link> *group_name</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *key</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> * const list[]</parameter>,
                                                         <parameter><link linkend="gsize"><type>gsize</type></link> length</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="rc-set-set-boolean-list">rc_set_set_boolean_list</link>             (<parameter>const <link linkend="gchar"><type>gchar</type></link> *group_name</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *key</parameter>,
                                                         <parameter><link linkend="gboolean"><type>gboolean</type></link> list[]</parameter>,
                                                         <parameter><link linkend="gsize"><type>gsize</type></link> length</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="rc-set-set-integer-list">rc_set_set_integer_list</link>             (<parameter>const <link linkend="gchar"><type>gchar</type></link> *group_name</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *key</parameter>,
                                                         <parameter><link linkend="gint"><type>gint</type></link> list[]</parameter>,
                                                         <parameter><link linkend="gsize"><type>gsize</type></link> length</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="rc-set-set-double-list">rc_set_set_double_list</link>              (<parameter>const <link linkend="gchar"><type>gchar</type></link> *group_name</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *key</parameter>,
                                                         <parameter><link linkend="gdouble"><type>gdouble</type></link> list[]</parameter>,
                                                         <parameter><link linkend="gsize"><type>gsize</type></link> length</parameter>);
<link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>            <link linkend="rc-set-has-key">rc_set_has_key</link>                      (<parameter>const <link linkend="gchar"><type>gchar</type></link> *group_name</parameter>,
                                                         <parameter><link linkend="gchar"><type>gchar</type></link> *key</parameter>,
                                                         <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);
<link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>            <link linkend="rc-set-load-setting">rc_set_load_setting</link>                 (<parameter>const <link linkend="gchar"><type>gchar</type></link> *filename</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="rc-set-save-setting">rc_set_save_setting</link>                 (<parameter>const <link linkend="gchar"><type>gchar</type></link> *filename</parameter>);
<link linkend="GKeyFile"><returnvalue>GKeyFile</returnvalue></link> *          <link linkend="rc-set-get-plugin-configure">rc_set_get_plugin_configure</link>         ();
</synopsis>
</refsynopsisdiv>

<refsect1 id="RhythmCat-Settings.description" role="desc">
<title role="desc.title">Description</title>
<para>
Manage the settings of player. Store settings in an ini-like configuration
file.
</para>
</refsect1>
<refsect1 id="RhythmCat-Settings.details" role="details">
<title role="details.title">Details</title>
<refsect2 id="rc-set-init" role="function">
<title>rc_set_init ()</title>
<indexterm zone="rc-set-init"><primary>rc_set_init</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                rc_set_init                         ();</programlisting>
<para>
Initialize and load the settings of the player.
</para></refsect2>
<refsect2 id="rc-set-exit" role="function">
<title>rc_set_exit ()</title>
<indexterm zone="rc-set-exit"><primary>rc_set_exit</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                rc_set_exit                         ();</programlisting>
<para>
Free the settings when exits.
</para></refsect2>
<refsect2 id="rc-set-get-string" role="function">
<title>rc_set_get_string ()</title>
<indexterm zone="rc-set-get-string"><primary>rc_set_get_string</primary></indexterm>
<programlisting><link linkend="gchar"><returnvalue>gchar</returnvalue></link> *             rc_set_get_string                   (<parameter>const <link linkend="gchar"><type>gchar</type></link> *group_name</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *key</parameter>,
                                                         <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);</programlisting>
<para>
Returns the string value associated with key under group_name.
</para><variablelist role="params">
<varlistentry><term><parameter>group_name</parameter>&#160;:</term>
<listitem><simpara>a group name
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>key</parameter>&#160;:</term>
<listitem><simpara>a key
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara>return location for a GError, or NULL
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> A newly allocated string or NULL if the specified key cannot
be found.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="rc-set-get-integer" role="function">
<title>rc_set_get_integer ()</title>
<indexterm zone="rc-set-get-integer"><primary>rc_set_get_integer</primary></indexterm>
<programlisting><link linkend="gint"><returnvalue>gint</returnvalue></link>                rc_set_get_integer                  (<parameter>const <link linkend="gchar"><type>gchar</type></link> *group_name</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *key</parameter>,
                                                         <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);</programlisting>
<para>
Returns the value associated with key under group_name as an integer.
</para><variablelist role="params">
<varlistentry><term><parameter>group_name</parameter>&#160;:</term>
<listitem><simpara>a group name
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>key</parameter>&#160;:</term>
<listitem><simpara>a key
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara>return location for a GError, or NULL
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> The value associated with the key as an integer, or 0
if the key was not found or could not be parsed.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="rc-set-get-double" role="function">
<title>rc_set_get_double ()</title>
<indexterm zone="rc-set-get-double"><primary>rc_set_get_double</primary></indexterm>
<programlisting><link linkend="gdouble"><returnvalue>gdouble</returnvalue></link>             rc_set_get_double                   (<parameter>const <link linkend="gchar"><type>gchar</type></link> *group_name</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *key</parameter>,
                                                         <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);</programlisting>
<para>
Returns the value associated with key under group_name as a double.
If group_name is NULL, the start_group is used.
</para><variablelist role="params">
<varlistentry><term><parameter>group_name</parameter>&#160;:</term>
<listitem><simpara>a group name
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>key</parameter>&#160;:</term>
<listitem><simpara>a key
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara>return location for a GError, or NULL
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> The value associated with the key as a double, or 0.0
if the key was not found or could not be parsed.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="rc-set-get-boolean" role="function">
<title>rc_set_get_boolean ()</title>
<indexterm zone="rc-set-get-boolean"><primary>rc_set_get_boolean</primary></indexterm>
<programlisting><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>            rc_set_get_boolean                  (<parameter>const <link linkend="gchar"><type>gchar</type></link> *group_name</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *key</parameter>,
                                                         <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);</programlisting>
<para>
Returns the value associated with key under group_name as a boolean.
</para><variablelist role="params">
<varlistentry><term><parameter>group_name</parameter>&#160;:</term>
<listitem><simpara>a group name
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>key</parameter>&#160;:</term>
<listitem><simpara>a key
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara>return location for a GError, or NULL
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> The value associated with the key as a boolean, or FALSE if the
key was not found or could not be parsed.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="rc-set-get-string-list" role="function">
<title>rc_set_get_string_list ()</title>
<indexterm zone="rc-set-get-string-list"><primary>rc_set_get_string_list</primary></indexterm>
<programlisting><link linkend="gchar"><returnvalue>gchar</returnvalue></link> **            rc_set_get_string_list              (<parameter>const <link linkend="gchar"><type>gchar</type></link> *group_name</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *key</parameter>,
                                                         <parameter><link linkend="gsize"><type>gsize</type></link> *length</parameter>,
                                                         <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);</programlisting>
<para>
Returns the values associated with key under group_name.
</para><variablelist role="params">
<varlistentry><term><parameter>group_name</parameter>&#160;:</term>
<listitem><simpara>a group name
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>key</parameter>&#160;:</term>
<listitem><simpara>a key
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>length</parameter>&#160;:</term>
<listitem><simpara>return location for the number of returned strings, or NULL
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara>return location for a GError, or NULL
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> A NULL-terminated string array or NULL if the specified key
cannot be found. The array should be freed with <link linkend="g-strfreev"><function>g_strfreev()</function></link>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="rc-set-get-boolean-list" role="function">
<title>rc_set_get_boolean_list ()</title>
<indexterm zone="rc-set-get-boolean-list"><primary>rc_set_get_boolean_list</primary></indexterm>
<programlisting><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link> *          rc_set_get_boolean_list             (<parameter>const <link linkend="gchar"><type>gchar</type></link> *group_name</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *key</parameter>,
                                                         <parameter><link linkend="gsize"><type>gsize</type></link> *length</parameter>,
                                                         <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);</programlisting>
<para>
Returns the values associated with key under group_name as booleans.
</para><variablelist role="params">
<varlistentry><term><parameter>group_name</parameter>&#160;:</term>
<listitem><simpara>a group name
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>key</parameter>&#160;:</term>
<listitem><simpara>a key
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>length</parameter>&#160;:</term>
<listitem><simpara>the number of booleans returned
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara>return location for a GError, or NULL
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> The values associated with the key as a list of booleans, or
NULL if the key was not found or could not be parsed.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="rc-set-get-integer-list" role="function">
<title>rc_set_get_integer_list ()</title>
<indexterm zone="rc-set-get-integer-list"><primary>rc_set_get_integer_list</primary></indexterm>
<programlisting><link linkend="gint"><returnvalue>gint</returnvalue></link> *              rc_set_get_integer_list             (<parameter>const <link linkend="gchar"><type>gchar</type></link> *group_name</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *key</parameter>,
                                                         <parameter><link linkend="gsize"><type>gsize</type></link> *length</parameter>,
                                                         <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);</programlisting>
<para>
Returns the values associated with key under group_name as integers.
</para><variablelist role="params">
<varlistentry><term><parameter>group_name</parameter>&#160;:</term>
<listitem><simpara>a group name
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>key</parameter>&#160;:</term>
<listitem><simpara>a key
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>length</parameter>&#160;:</term>
<listitem><simpara>the number of integers returned
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara>return location for a GError, or NULL
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> The values associated with the key as a list of integers, or
NULL if the key was not found or could not be parsed.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="rc-set-get-double-list" role="function">
<title>rc_set_get_double_list ()</title>
<indexterm zone="rc-set-get-double-list"><primary>rc_set_get_double_list</primary></indexterm>
<programlisting><link linkend="gdouble"><returnvalue>gdouble</returnvalue></link> *           rc_set_get_double_list              (<parameter>const <link linkend="gchar"><type>gchar</type></link> *group_name</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *key</parameter>,
                                                         <parameter><link linkend="gsize"><type>gsize</type></link> *length</parameter>,
                                                         <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);</programlisting>
<para>
Returns the values associated with key under group_name as doubles.
</para><variablelist role="params">
<varlistentry><term><parameter>group_name</parameter>&#160;:</term>
<listitem><simpara>a group name
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>key</parameter>&#160;:</term>
<listitem><simpara>a key
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>length</parameter>&#160;:</term>
<listitem><simpara>the number of doubles returned
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara>return location for a GError, or NULL
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> The values associated with the key as a list of doubles, or
NULL if the key was not found or could not be parsed.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="rc-set-set-string" role="function">
<title>rc_set_set_string ()</title>
<indexterm zone="rc-set-set-string"><primary>rc_set_set_string</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                rc_set_set_string                   (<parameter>const <link linkend="gchar"><type>gchar</type></link> *group_name</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *key</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *string</parameter>);</programlisting>
<para>
Associates a new string value with key under group_name. If key cannot be
found then it is created. If group_name cannot be found then it is created.
</para><variablelist role="params">
<varlistentry><term><parameter>group_name</parameter>&#160;:</term>
<listitem><simpara>a group name
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>key</parameter>&#160;:</term>
<listitem><simpara>a key
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>string</parameter>&#160;:</term>
<listitem><simpara>a string
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="rc-set-set-boolean" role="function">
<title>rc_set_set_boolean ()</title>
<indexterm zone="rc-set-set-boolean"><primary>rc_set_set_boolean</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                rc_set_set_boolean                  (<parameter>const <link linkend="gchar"><type>gchar</type></link> *group_name</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *key</parameter>,
                                                         <parameter><link linkend="gboolean"><type>gboolean</type></link> value</parameter>);</programlisting>
<para>
Associates a new boolean value with key under group_name. If key cannot be
found then it is created. If group_name cannot be found then it is created.
</para><variablelist role="params">
<varlistentry><term><parameter>group_name</parameter>&#160;:</term>
<listitem><simpara>a group name
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>key</parameter>&#160;:</term>
<listitem><simpara>a key
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>value</parameter>&#160;:</term>
<listitem><simpara>TRUE or FALSE
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="rc-set-set-integer" role="function">
<title>rc_set_set_integer ()</title>
<indexterm zone="rc-set-set-integer"><primary>rc_set_set_integer</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                rc_set_set_integer                  (<parameter>const <link linkend="gchar"><type>gchar</type></link> *group_name</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *key</parameter>,
                                                         <parameter><link linkend="gint"><type>gint</type></link> value</parameter>);</programlisting>
<para>
Associates a new integer value with key under group_name. If key cannot be
found then it is created. If group_name cannot be found then it is created.
</para><variablelist role="params">
<varlistentry><term><parameter>group_name</parameter>&#160;:</term>
<listitem><simpara>a group name
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>key</parameter>&#160;:</term>
<listitem><simpara>a key
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>value</parameter>&#160;:</term>
<listitem><simpara>an integer value
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="rc-set-set-double" role="function">
<title>rc_set_set_double ()</title>
<indexterm zone="rc-set-set-double"><primary>rc_set_set_double</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                rc_set_set_double                   (<parameter>const <link linkend="gchar"><type>gchar</type></link> *group_name</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *key</parameter>,
                                                         <parameter><link linkend="gdouble"><type>gdouble</type></link> value</parameter>);</programlisting>
<para>
Associates a new double value with key under group_name. If key cannot be
found then it is created. If group_name cannot be found then it is created.
</para><variablelist role="params">
<varlistentry><term><parameter>group_name</parameter>&#160;:</term>
<listitem><simpara>a group name
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>key</parameter>&#160;:</term>
<listitem><simpara>a key
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>value</parameter>&#160;:</term>
<listitem><simpara>an double value
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="rc-set-set-string-list" role="function">
<title>rc_set_set_string_list ()</title>
<indexterm zone="rc-set-set-string-list"><primary>rc_set_set_string_list</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                rc_set_set_string_list              (<parameter>const <link linkend="gchar"><type>gchar</type></link> *group_name</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *key</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> * const list[]</parameter>,
                                                         <parameter><link linkend="gsize"><type>gsize</type></link> length</parameter>);</programlisting>
<para>
Associates a list of string values for key under group_name. If key cannot
be found then it is created. If group_name cannot be found then it is created.
</para><variablelist role="params">
<varlistentry><term><parameter>group_name</parameter>&#160;:</term>
<listitem><simpara>a group name
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>key</parameter>&#160;:</term>
<listitem><simpara>a key
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>list</parameter>&#160;:</term>
<listitem><simpara>an array of string values
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>length</parameter>&#160;:</term>
<listitem><simpara>number of string values in list
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="rc-set-set-boolean-list" role="function">
<title>rc_set_set_boolean_list ()</title>
<indexterm zone="rc-set-set-boolean-list"><primary>rc_set_set_boolean_list</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                rc_set_set_boolean_list             (<parameter>const <link linkend="gchar"><type>gchar</type></link> *group_name</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *key</parameter>,
                                                         <parameter><link linkend="gboolean"><type>gboolean</type></link> list[]</parameter>,
                                                         <parameter><link linkend="gsize"><type>gsize</type></link> length</parameter>);</programlisting>
<para>
Associates a list of boolean values with key under group_name. If key cannot
be found then it is created. If group_name is NULL, the start_group is used.
</para><variablelist role="params">
<varlistentry><term><parameter>group_name</parameter>&#160;:</term>
<listitem><simpara>a group name
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>key</parameter>&#160;:</term>
<listitem><simpara>a key
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>list</parameter>&#160;:</term>
<listitem><simpara>an array of boolean values
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>length</parameter>&#160;:</term>
<listitem><simpara>number of string values in list
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="rc-set-set-integer-list" role="function">
<title>rc_set_set_integer_list ()</title>
<indexterm zone="rc-set-set-integer-list"><primary>rc_set_set_integer_list</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                rc_set_set_integer_list             (<parameter>const <link linkend="gchar"><type>gchar</type></link> *group_name</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *key</parameter>,
                                                         <parameter><link linkend="gint"><type>gint</type></link> list[]</parameter>,
                                                         <parameter><link linkend="gsize"><type>gsize</type></link> length</parameter>);</programlisting>
<para>
Associates a list of integer values with key under group_name. If key cannot
be found then it is created. If group_name is NULL, the start_group is used.
</para><variablelist role="params">
<varlistentry><term><parameter>group_name</parameter>&#160;:</term>
<listitem><simpara>a group name
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>key</parameter>&#160;:</term>
<listitem><simpara>a key
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>list</parameter>&#160;:</term>
<listitem><simpara>an array of integer values
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>length</parameter>&#160;:</term>
<listitem><simpara>number of integer values in list
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="rc-set-set-double-list" role="function">
<title>rc_set_set_double_list ()</title>
<indexterm zone="rc-set-set-double-list"><primary>rc_set_set_double_list</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                rc_set_set_double_list              (<parameter>const <link linkend="gchar"><type>gchar</type></link> *group_name</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *key</parameter>,
                                                         <parameter><link linkend="gdouble"><type>gdouble</type></link> list[]</parameter>,
                                                         <parameter><link linkend="gsize"><type>gsize</type></link> length</parameter>);</programlisting>
<para>
Associates a list of double values with key under group_name. If key cannot
be found then it is created. If group_name is NULL, the start_group is used.
</para><variablelist role="params">
<varlistentry><term><parameter>group_name</parameter>&#160;:</term>
<listitem><simpara>a group name
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>key</parameter>&#160;:</term>
<listitem><simpara>a key
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>list</parameter>&#160;:</term>
<listitem><simpara>an array of double values
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>length</parameter>&#160;:</term>
<listitem><simpara>number of double values in list
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="rc-set-has-key" role="function">
<title>rc_set_has_key ()</title>
<indexterm zone="rc-set-has-key"><primary>rc_set_has_key</primary></indexterm>
<programlisting><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>            rc_set_has_key                      (<parameter>const <link linkend="gchar"><type>gchar</type></link> *group_name</parameter>,
                                                         <parameter><link linkend="gchar"><type>gchar</type></link> *key</parameter>,
                                                         <parameter><link linkend="GError"><type>GError</type></link> **error</parameter>);</programlisting>
<para>
Looks whether the key file has the key in the group.
</para><variablelist role="params">
<varlistentry><term><parameter>group_name</parameter>&#160;:</term>
<listitem><simpara>a group name
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>key</parameter>&#160;:</term>
<listitem><simpara>a key
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara>return location for a GError
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> TRUE if key is a part of group_name, FALSE otherwise.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="rc-set-load-setting" role="function">
<title>rc_set_load_setting ()</title>
<indexterm zone="rc-set-load-setting"><primary>rc_set_load_setting</primary></indexterm>
<programlisting><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>            rc_set_load_setting                 (<parameter>const <link linkend="gchar"><type>gchar</type></link> *filename</parameter>);</programlisting>
<para>
Read configuration from given file.
</para><variablelist role="params">
<varlistentry><term><parameter>filename</parameter>&#160;:</term>
<listitem><simpara>the path of configuration file
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> Whether the configuration file is read.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="rc-set-save-setting" role="function">
<title>rc_set_save_setting ()</title>
<indexterm zone="rc-set-save-setting"><primary>rc_set_save_setting</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                rc_set_save_setting                 (<parameter>const <link linkend="gchar"><type>gchar</type></link> *filename</parameter>);</programlisting>
<para>
Save configuration data to given file.
</para><variablelist role="params">
<varlistentry><term><parameter>filename</parameter>&#160;:</term>
<listitem><simpara>the path of configuration file
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="rc-set-get-plugin-configure" role="function">
<title>rc_set_get_plugin_configure ()</title>
<indexterm zone="rc-set-get-plugin-configure"><primary>rc_set_get_plugin_configure</primary></indexterm>
<programlisting><link linkend="GKeyFile"><returnvalue>GKeyFile</returnvalue></link> *          rc_set_get_plugin_configure         ();</programlisting>
<para>
Return the GKeyFile of plugin configuration.
</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> The GKeyFile of plugin configuration.
</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>

</refentry>
