<?xml version="1.0"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN"
               "http://www.oasis-open.org/docbook/xml/4.3/docbookx.dtd"
[
  <!ENTITY % local.common.attrib "xmlns:xi  CDATA  #FIXED 'http://www.w3.org/2003/XInclude'">
]>
<refentry id="RhythmCat-Tag">
<refmeta>
<refentrytitle role="top_of_page" id="RhythmCat-Tag.top_of_page">Tag</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>
  RHYTHMCAT Library
</refmiscinfo>
</refmeta>
<refnamediv>
<refname>Tag</refname>
<refpurpose>Process the tags of the music.</refpurpose>
</refnamediv>

<refsynopsisdiv id="RhythmCat-Tag.synopsis" role="synopsis">
<title role="synopsis.title">Synopsis</title>

<synopsis>
#include &lt;tag.h&gt;

                    <link linkend="RCMusicMetaData">RCMusicMetaData</link>;
<link linkend="RCMusicMetaData"><returnvalue>RCMusicMetaData</returnvalue></link> *   <link linkend="rc-tag-read-metadata">rc_tag_read_metadata</link>                (<parameter>const <link linkend="gchar"><type>gchar</type></link> *uri</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="rc-tag-free">rc_tag_free</link>                         (<parameter><link linkend="RCMusicMetaData"><type>RCMusicMetaData</type></link> *mmd</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="rc-tag-set-playing-metadata">rc_tag_set_playing_metadata</link>         (<parameter>const <link linkend="RCMusicMetaData"><type>RCMusicMetaData</type></link> *mmd</parameter>);
const <link linkend="RCMusicMetaData"><returnvalue>RCMusicMetaData</returnvalue></link> * <link linkend="rc-tag-get-playing-metadata">rc_tag_get_playing_metadata</link>     ();
<link linkend="gchar"><returnvalue>gchar</returnvalue></link> *             <link linkend="rc-tag-get-name-from-fpath">rc_tag_get_name_from_fpath</link>          (<parameter>const <link linkend="gchar"><type>gchar</type></link> *filename</parameter>);
<link linkend="gchar"><returnvalue>gchar</returnvalue></link> *             <link linkend="rc-tag-find-file">rc_tag_find_file</link>                    (<parameter>const <link linkend="gchar"><type>gchar</type></link> *dirname</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *str</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *extname</parameter>);
<link linkend="gchar"><returnvalue>gchar</returnvalue></link> *             <link linkend="rc-tag-search-lyric-file">rc_tag_search_lyric_file</link>            (<parameter>const <link linkend="gchar"><type>gchar</type></link> *dirname</parameter>,
                                                         <parameter>const <link linkend="RCMusicMetaData"><type>RCMusicMetaData</type></link> *mmd</parameter>);
<link linkend="gchar"><returnvalue>gchar</returnvalue></link> *             <link linkend="rc-tag-search-album-file">rc_tag_search_album_file</link>            (<parameter>const <link linkend="gchar"><type>gchar</type></link> *dirname</parameter>,
                                                         <parameter>const <link linkend="RCMusicMetaData"><type>RCMusicMetaData</type></link> *mmd</parameter>);
</synopsis>
</refsynopsisdiv>

<refsect1 id="RhythmCat-Tag.description" role="desc">
<title role="desc.title">Description</title>
<para>
Process the tags of the music, like metadata, etc.
</para>
</refsect1>
<refsect1 id="RhythmCat-Tag.details" role="details">
<title role="details.title">Details</title>
<refsect2 id="RCMusicMetaData" role="struct">
<title>RCMusicMetaData</title>
<indexterm zone="RCMusicMetaData"><primary>RCMusicMetaData</primary></indexterm>
<programlisting>typedef struct {
    gint64 length;
    gchar *uri;
    guint tracknum;
    guint bitrate;
    gint samplerate;
    gint channels;
    gchar *title;
    gchar *artist;
    gchar *album;
    gchar *comment;
    gchar *file_type;
    gchar *emb_cue;
    GstBuffer *image;
    gboolean eos;
    gboolean audio_flag;
    gboolean video_flag;
    gpointer user_data;
} RCMusicMetaData;
</programlisting>
<para>
Custom struct type to store the music metadata.
</para><variablelist role="struct">
<varlistentry><term><link linkend="gint64"><type>gint64</type></link>&#160;<structfield id="RCMusicMetaData.length">length</structfield>;</term>
<listitem><simpara>the length of the music
</simpara></listitem>
</varlistentry>
<varlistentry><term><link linkend="gchar"><type>gchar</type></link>&#160;*<structfield id="RCMusicMetaData.uri">uri</structfield>;</term>
<listitem><simpara>the URI of the music
</simpara></listitem>
</varlistentry>
<varlistentry><term><link linkend="guint"><type>guint</type></link>&#160;<structfield id="RCMusicMetaData.tracknum">tracknum</structfield>;</term>
<listitem><simpara>the track number of the music
</simpara></listitem>
</varlistentry>
<varlistentry><term><link linkend="guint"><type>guint</type></link>&#160;<structfield id="RCMusicMetaData.bitrate">bitrate</structfield>;</term>
<listitem><simpara>the bitrate of the music
</simpara></listitem>
</varlistentry>
<varlistentry><term><link linkend="gint"><type>gint</type></link>&#160;<structfield id="RCMusicMetaData.samplerate">samplerate</structfield>;</term>
<listitem><simpara>the sample rate of the music
</simpara></listitem>
</varlistentry>
<varlistentry><term><link linkend="gint"><type>gint</type></link>&#160;<structfield id="RCMusicMetaData.channels">channels</structfield>;</term>
<listitem><simpara>the channel number of the music
</simpara></listitem>
</varlistentry>
<varlistentry><term><link linkend="gchar"><type>gchar</type></link>&#160;*<structfield id="RCMusicMetaData.title">title</structfield>;</term>
<listitem><simpara>the title text of the music
</simpara></listitem>
</varlistentry>
<varlistentry><term><link linkend="gchar"><type>gchar</type></link>&#160;*<structfield id="RCMusicMetaData.artist">artist</structfield>;</term>
<listitem><simpara>the artist text of the music
</simpara></listitem>
</varlistentry>
<varlistentry><term><link linkend="gchar"><type>gchar</type></link>&#160;*<structfield id="RCMusicMetaData.album">album</structfield>;</term>
<listitem><simpara>the album text of the music
</simpara></listitem>
</varlistentry>
<varlistentry><term><link linkend="gchar"><type>gchar</type></link>&#160;*<structfield id="RCMusicMetaData.comment">comment</structfield>;</term>
<listitem><simpara>the comment text of the music
</simpara></listitem>
</varlistentry>
<varlistentry><term><link linkend="gchar"><type>gchar</type></link>&#160;*<structfield id="RCMusicMetaData.file-type">file_type</structfield>;</term>
<listitem><simpara>the file type of the music
</simpara></listitem>
</varlistentry>
<varlistentry><term><link linkend="gchar"><type>gchar</type></link>&#160;*<structfield id="RCMusicMetaData.emb-cue">emb_cue</structfield>;</term>
<listitem><simpara>the embeded CUE data of the music
</simpara></listitem>
</varlistentry>
<varlistentry><term><link linkend="GstBuffer"><type>GstBuffer</type></link>&#160;*<structfield id="RCMusicMetaData.image">image</structfield>;</term>
<listitem><simpara>the GstBuffer which contains the cover image
</simpara></listitem>
</varlistentry>
<varlistentry><term><link linkend="gboolean"><type>gboolean</type></link>&#160;<structfield id="RCMusicMetaData.eos">eos</structfield>;</term>
<listitem><simpara>the EOS signal
</simpara></listitem>
</varlistentry>
<varlistentry><term><link linkend="gboolean"><type>gboolean</type></link>&#160;<structfield id="RCMusicMetaData.audio-flag">audio_flag</structfield>;</term>
<listitem><simpara>whether this file has audio
</simpara></listitem>
</varlistentry>
<varlistentry><term><link linkend="gboolean"><type>gboolean</type></link>&#160;<structfield id="RCMusicMetaData.video-flag">video_flag</structfield>;</term>
<listitem><simpara>whether this file has video
</simpara></listitem>
</varlistentry>
<varlistentry><term><link linkend="gpointer"><type>gpointer</type></link>&#160;<structfield id="RCMusicMetaData.user-data">user_data</structfield>;</term>
<listitem><simpara>the user data
</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2 id="rc-tag-read-metadata" role="function">
<title>rc_tag_read_metadata ()</title>
<indexterm zone="rc-tag-read-metadata"><primary>rc_tag_read_metadata</primary></indexterm>
<programlisting><link linkend="RCMusicMetaData"><returnvalue>RCMusicMetaData</returnvalue></link> *   rc_tag_read_metadata                (<parameter>const <link linkend="gchar"><type>gchar</type></link> *uri</parameter>);</programlisting>
<para>
Read tag (metadata) from given URI.
</para><variablelist role="params">
<varlistentry><term><parameter>uri</parameter>&#160;:</term>
<listitem><simpara>the URI of the music file
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> The Metadata of the music, NULL if the file is not a music file,
free after usage.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="rc-tag-free" role="function">
<title>rc_tag_free ()</title>
<indexterm zone="rc-tag-free"><primary>rc_tag_free</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                rc_tag_free                         (<parameter><link linkend="RCMusicMetaData"><type>RCMusicMetaData</type></link> *mmd</parameter>);</programlisting>
<para>
Free the memory allocated for metadata struct (RCMusicMetaData).
</para><variablelist role="params">
<varlistentry><term><parameter>mmd</parameter>&#160;:</term>
<listitem><simpara>the metadata
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="rc-tag-set-playing-metadata" role="function">
<title>rc_tag_set_playing_metadata ()</title>
<indexterm zone="rc-tag-set-playing-metadata"><primary>rc_tag_set_playing_metadata</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                rc_tag_set_playing_metadata         (<parameter>const <link linkend="RCMusicMetaData"><type>RCMusicMetaData</type></link> *mmd</parameter>);</programlisting>
<para>
Set playing metadata.
Please do not use this function in plugins.
</para><variablelist role="params">
<varlistentry><term><parameter>mmd</parameter>&#160;:</term>
<listitem><simpara>the metadata
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="rc-tag-get-playing-metadata" role="function">
<title>rc_tag_get_playing_metadata ()</title>
<indexterm zone="rc-tag-get-playing-metadata"><primary>rc_tag_get_playing_metadata</primary></indexterm>
<programlisting>const <link linkend="RCMusicMetaData"><returnvalue>RCMusicMetaData</returnvalue></link> * rc_tag_get_playing_metadata     ();</programlisting>
<para>
Return the metadata which the player is playing.
</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> The metadata which the player is playing.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="rc-tag-get-name-from-fpath" role="function">
<title>rc_tag_get_name_from_fpath ()</title>
<indexterm zone="rc-tag-get-name-from-fpath"><primary>rc_tag_get_name_from_fpath</primary></indexterm>
<programlisting><link linkend="gchar"><returnvalue>gchar</returnvalue></link> *             rc_tag_get_name_from_fpath          (<parameter>const <link linkend="gchar"><type>gchar</type></link> *filename</parameter>);</programlisting>
<para>
Return the base-name without extension from a full path or file name.
</para><variablelist role="params">
<varlistentry><term><parameter>filename</parameter>&#160;:</term>
<listitem><simpara>the full path or file name
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> The base-name without extension.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="rc-tag-find-file" role="function">
<title>rc_tag_find_file ()</title>
<indexterm zone="rc-tag-find-file"><primary>rc_tag_find_file</primary></indexterm>
<programlisting><link linkend="gchar"><returnvalue>gchar</returnvalue></link> *             rc_tag_find_file                    (<parameter>const <link linkend="gchar"><type>gchar</type></link> *dirname</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *str</parameter>,
                                                         <parameter>const <link linkend="gchar"><type>gchar</type></link> *extname</parameter>);</programlisting>
<para>
Find a file in the directory by extension name and prefix string.
</para><variablelist role="params">
<varlistentry><term><parameter>dirname</parameter>&#160;:</term>
<listitem><simpara>the directory name
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>str</parameter>&#160;:</term>
<listitem><simpara>the prefix string of the file name
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>extname</parameter>&#160;:</term>
<listitem><simpara>the extenstion name of the file
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> The file name which is found in the directory, NULL if not found,
free after usage.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="rc-tag-search-lyric-file" role="function">
<title>rc_tag_search_lyric_file ()</title>
<indexterm zone="rc-tag-search-lyric-file"><primary>rc_tag_search_lyric_file</primary></indexterm>
<programlisting><link linkend="gchar"><returnvalue>gchar</returnvalue></link> *             rc_tag_search_lyric_file            (<parameter>const <link linkend="gchar"><type>gchar</type></link> *dirname</parameter>,
                                                         <parameter>const <link linkend="RCMusicMetaData"><type>RCMusicMetaData</type></link> *mmd</parameter>);</programlisting>
<para>
Search lyric file in given directory by the given metadata.
</para><variablelist role="params">
<varlistentry><term><parameter>dirname</parameter>&#160;:</term>
<listitem><simpara>the directory name
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>mmd</parameter>&#160;:</term>
<listitem><simpara>the metadata
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> The file name which is found in the directory, NULL if not found,
free after usage.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="rc-tag-search-album-file" role="function">
<title>rc_tag_search_album_file ()</title>
<indexterm zone="rc-tag-search-album-file"><primary>rc_tag_search_album_file</primary></indexterm>
<programlisting><link linkend="gchar"><returnvalue>gchar</returnvalue></link> *             rc_tag_search_album_file            (<parameter>const <link linkend="gchar"><type>gchar</type></link> *dirname</parameter>,
                                                         <parameter>const <link linkend="RCMusicMetaData"><type>RCMusicMetaData</type></link> *mmd</parameter>);</programlisting>
<para>
Search album image file in given directory by the given metadata.
</para><variablelist role="params">
<varlistentry><term><parameter>dirname</parameter>&#160;:</term>
<listitem><simpara>the directory name
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>mmd</parameter>&#160;:</term>
<listitem><simpara>the metadata
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> The file name which is found in the directory, NULL if not found,
free after usage.
</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>

</refentry>
